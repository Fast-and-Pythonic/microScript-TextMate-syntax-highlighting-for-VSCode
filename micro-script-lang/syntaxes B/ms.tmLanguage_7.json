{
    "name": "MicroScript",
    "scopeName": "source.ms",
    "fileTypes": [
        "ms"
    ],
    "patterns": [
        { "include": "#keywords" },
        { "include": "    #variables" },
        { "include": "#numbers" },
        { "include": "#booleans" },
        { "include": "#strings" },
        { "include": "#multi_char_operators" },
        { "include": "#compound_operators" },
        { "include": "#operators" },
        { "include": "#comments" },
        { "include": "#functions_params" }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "match": "\\b(?:local|global)\\b",
                    "name": "storage.modifier.ms"
                },
                {
                    "match": "\\b(?:end)\\b",
                    "name": "keyword.control.ms"
                },
                {
                    "match": "\\b(?:if|elsif|else|then)\\b",
                    "name": "keyword.control.conditional.ms"
                },
                {
                    "match": "\\b(?:and|or|not)\\b",
                    "name": "keyword.operator.logical.ms"
                },
                {
                    "match": "\\b(?:while|for|to|by|in)\\b",
                    "name": "keyword.control.loop.ms"
                },
                {
                    "match": "\\b(?:break|continue|return)\\b",
                    "name": "keyword.control.flow.ms"
                },
                {
                    "match": "\\b(?:function)\\b",
                    "name": "storage.type.function.ms"
                },
                {
                    "match": "\\b(?:object)\\b",
                    "name": "storage.type.object.ms"
                },
                {
                    "match": "\\b(?:class)\\b",
                    "name": "storage.type.class.ms"
                },
                {
                    "match": "\\b(?:extends)\\b",
                    "name": "storage.modifier.ms"
                },
                
                
                {
                    "match": "\\b(?:constructor|new)\\b",
                    "name": "keyword.control.other.ms"
                },
                {
                    "match": "\\b(?:super|this)\\b",
                    "name": "variable.language.ms"
                },
                {
                    "match": "\\b(?:do|after|every|sleep)\\b",
                    "name": "keyword.control.timing.ms"
                }
                
                
                
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "match": "\\b\\d+\\.?\\d*\\b",
                    "name": "constant.numeric.ms"
                }
            ]
        },
        "booleans": {
            "patterns": [
                {
                    "match": "\\b(?:true|false)\\b",
                    "name": "constant.language.boolean.ms"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "name": "string.quoted.double.ms",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.ms"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "name": "string.quoted.single.ms",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.ms"
                        }
                    ]
                }
            ]
        },
        "multi_char_operators": {
            "patterns": [
                {
                    "match": "==|!=|\\<=|\\>=",
                    "name": "keyword.operator.comparison.ms"
                },
                {
                    "match": "<<|>>",
                    "name": "keyword.operator.bitwise.ms"
                }
            ]
        },
        "compound_operators": {
            "patterns": [
                {
                    "match": "\\+=|-=|\\*=|/=|%=",
                    "name": "keyword.operator.assignment.compound.ms"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "=(?!=)",
                    "name": "keyword.operator.assignment.ms"
                },
                {
                    "match": "\\+|\\-|\\*(?!\\/)|(?<!\\/)\\/(?!\\/|\\*)|\\%|\\^",
                    "name": "keyword.operator.arithmetic.ms"
                },
                {
                    "match": "\\<|\\>",
                    "name": "keyword.operator.comparison.ms"
                },
                {
                    "match": "\\&|\\|",
                    "name": "keyword.operator.bitwise.ms"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.ms"
                },
                {
                    "match": "//.*$",
                    "name": "comment.line.double-slash.ms"
                }
            ]
        },
        "functions_params": {
            "patterns": [
                {
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()",
                    "name": "entity.name.function.ms"
                },
                {
                    "match": "(?<=\\()[^,=()]*?(?=\\s*=)|(?<=,\\s*)[^,=()]*?(?=\\s*=)",
                    "name": "variable.parameter.ms"
                }
            ]
        }
    }
}