{
    "name": "MicroScript",
    "scopeName": "source.ms",
    "fileTypes": [
        "ms"
    ],
    "patterns": [
        { "include": "#comments" },
        
        { "include": "#call name function" },
        { "include": "#call name class" },
        
        { "include": "#parameters declaration" },
        { "include": "#named parameters assignment" },
        
        { "include": "#keywords" },
        
        { "include": "#numbers" },
        { "include": "#booleans" },
        { "include": "#strings" },
        { "include": "#multi_char_operators" },
        { "include": "#compound_operators" },
        { "include": "#operators" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.ms"
                },
                {
                    "match": "//.*$",
                    "name": "comment.line.double-slash.ms"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:local|global)(?![a-zA-Z0-9._])",
                    "name": "storage.modifier.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:end)(?![a-zA-Z0-9._])",
                    "name": "keyword.control.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:if|elsif|else|then)(?![a-zA-Z0-9._])",
                    "name": "keyword.control.conditional.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:and|or|not)(?![a-zA-Z0-9._])",
                    "name": "keyword.operator.logical.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:while|for|to|by|in)(?![a-zA-Z0-9._])",
                    "name": "keyword.control.loop.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:break|continue|return)(?![a-zA-Z0-9._])",
                    "name": "keyword.control.flow.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:function)(?![a-zA-Z0-9._])",
                    "name": "storage.type.function.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:object)(?![a-zA-Z0-9._])",
                    "name": "storage.type.object.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:class)(?![a-zA-Z0-9._])",
                    "name": "storage.type.class.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:extends)(?![a-zA-Z0-9._])",
                    "name": "storage.modifier.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:constructor)(?![a-zA-Z0-9._])",
                    "name": "entity.name.function.constructor.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:new)(?![a-zA-Z0-9._])",
                    "name": "keyword.operator.new"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:super)(?![a-zA-Z0-9._])",
                    "name": "variable.language.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:this)(?![a-zA-Z0-9_])",
                    "name": "variable.language.ms"
                },
                {
                    "match": "(?<![a-zA-Z._])(?<=\\d|\\s|^|[^a-zA-Z0-9])(?:do|after|every|sleep)(?![a-zA-Z0-9._])",
                    "name": "keyword.control.timing.ms"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "match": "\\b\\d+\\.?\\d*\\b",
                    "name": "constant.numeric.ms"
                }
            ]
        },
        "booleans": {
            "patterns": [
                {
                    "match": "(?<=\\s|^|=|\\(|\\[)(?:true|false)(?=\\s|$|,|\\)|\\])",
                    "name": "constant.language.boolean.ms"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "name": "string.quoted.double.ms",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.ms"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.string.begin.ms" }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.string.end.ms" }
                    },
                    "name": "string.quoted.single.ms",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.ms"
                        }
                    ]
                }
            ]
        },
        "multi_char_operators": {
            "patterns": [
                {
                    "match": "==|!=|\\<=|\\>=",
                    "name": "keyword.operator.comparison.ms"
                },
                {
                    "match": "<<|>>",
                    "name": "keyword.operator.bitwise.ms"
                }
            ]
        },
        "compound_operators": {
            "patterns": [
                {
                    "match": "\\+=|-=|\\*=|/=|%=",
                    "name": "keyword.operator.assignment.compound.ms"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "match": "=(?!=)",
                    "name": "keyword.operator.assignment.ms"
                },
                {
                    "match": "\\+|\\-|\\*(?!\\/)|(?<!\\/)\\/(?!\\/|\\*)|\\%|\\^",
                    "name": "keyword.operator.arithmetic.ms"
                },
                {
                    "match": "\\<|\\>",
                    "name": "keyword.operator.comparison.ms"
                },
                {
                    "match": "\\&|\\|",
                    "name": "keyword.operator.bitwise.ms"
                }
            ]
        },
        "call name function": {
            "patterns": [
                {
                    "match": "(?<!new\\s+)\\b(?!function\\b|local\\b|global\\b|and\\b|or\\b|not\\b|end\\b|if\\b|elsif\\b|else\\b|then\\b|while\\b|for\\b|to\\b|by\\b|in\\b|break\\b|continue\\b|return\\b|object\\b|class\\b|extends\\b|constructor\\b|new\\b|super\\b|this\\b|do\\b|after\\b|every\\b|sleep\\b)[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()",
                    "name": "entity.name.function.ms"
                }
            ]
        },
        "call name class": {
            "patterns": [
                {
                    "match": "(?<=new\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()",
                    "name": "entity.name.type.class.ms"
                }
            ]
        },
        
        "parameters declaration": {
            "patterns": [
                
            ]
        },
        "named parameters assignment": {
            "patterns": [
                {
                    "match": "(?<=\\()[^,=()]*?(?=\\s*=)|(?<=,\\s*)[^,=()]*?(?=\\s*=)",
                    "name": "variable.parameter.function-call.ms"
                }
            ]
        }
        
        
        
        
        
        
        
    }
}